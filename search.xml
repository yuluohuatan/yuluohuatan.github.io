<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java访问MongoDB</title>
    <url>/2019/11/04/Java%20%E8%AE%BF%E9%97%AE%20MongoDB/</url>
    <content><![CDATA[<h1><span id="java访问mongodb">Java访问MongoDB</span></h1><p>@[toc]</p>
<h2><span id="连接-mongodb-数据库">连接 MongoDB 数据库</span></h2><h3><span id="1-创建工程">1. 创建工程</span></h3><p>在POM文件中添加MongoDB驱动包坐标</p>
<pre><code class="xml">    &lt;dependencies&gt;
        &lt;!--添加 MongoDB 驱动坐标 --&gt;
        &lt;!-- https://mvnrepository.com/artifact/org.mongodb/mongo-java -driver --&gt;
        &lt;dependency&gt;
            &lt;groupId&gt;org.mongodb&lt;/groupId&gt;
            &lt;artifactId&gt;mongo-java-driver&lt;/artifactId&gt;
            &lt;version&gt;3.8.2&lt;/version&gt;
        &lt;/dependency&gt;
    &lt;/dependencies&gt;</code></pre>
<h3><span id="2创建-mongodb-连接">2.创建 MongoDB 连接</span></h3><p>封装 MongoDBUtil </p>
<pre><code class="java">package com.trf.mongodb;

import com.mongodb.MongoClient;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

/**
 * MongoDB工具类
 * @author ad
 * @date 2019-11-04 17:26
 */
public class MongDBUtil {
    private static MongoClient client = null;
    static {
        if (client == null) {
            client = new MongoClient(&quot;192.168.41.185&quot;, 27017);
        }
    }

    /**
     * 获取MongoDB数据库
     * @param dbName MongoDB数据库名
     * @return MongoDB数据库对象
     */
    public static MongoDatabase getDatabase(String dbName){
        return client.getDatabase(dbName);
    }

    public static MongoCollection getCollection(String dbName, String collectionName){
        MongoDatabase database = getDatabase(dbName);
        return database.getCollection(collectionName);
    }

}</code></pre>
<h3><span id="3-创建-mongodb-的认证连接">3. 创建 MongoDB 的认证连接</span></h3><p>封装 MongoDBAuthUtil </p>
<pre><code class="java">package com.trf.mongodb;

import com.mongodb.MongoClient;
import com.mongodb.MongoCredential;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

import java.util.Arrays;

/**
 * MongoDB工具类，使用用户认证
 * @author ad
 * @date 2019-11-04 17:42
 */
public class MongoDBAuthUtil {
    private static MongoClient client = null;
    static {
        if (client == null) {
            //创建用户认证信息
            MongoCredential credential = MongoCredential.createCredential(&quot;dev&quot;, &quot;dev&quot;, &quot;dev&quot;.toCharArray());
            //封装MongoDB的地址端口对象
            ServerAddress address = new ServerAddress(&quot;192.168.41.185&quot;, 27017);
            client = new MongoClient(address, Arrays.asList(credential));
        }
    }
    /**
     * 获取MongoDB数据库
     * @param dbName MongoDB数据库名
     * @return MongoDB数据库对象
     */
    public static MongoDatabase getDatabase(String dbName){
        return client.getDatabase(dbName);
    }

    /**
     * 获取MongoDB集合
     * @param dbName MongoDB数据库名
     * @param collectionName MongoDB集合名
     * @return MongoDB集合对象
     */
    public static MongoCollection getCollection(String dbName, String collectionName){
        MongoDatabase database = getDatabase(dbName);
        return database.getCollection(collectionName);
    }
}
</code></pre>
<h3><span id="4-创建-mongodb-的池连">4. 创建 MongoDB 的池连</span></h3><p>封装 MongoDBPoolUtil </p>
<pre><code class="java">package com.trf.mongodb;

import com.mongodb.MongoClient;
import com.mongodb.MongoClientOptions;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

/**
 * MongoDB工具类， 使用连接池
 * @author ad
 * @date 2019-11-04 17:26
 */
public class MongDBPoolUtil {
    private static MongoClient client = null;
    static {
        if (client == null) {
            MongoClientOptions.Builder builder = new MongoClientOptions.Builder();
            builder.connectionsPerHost(10);// 每个地址的最大连接数
            builder.connectTimeout(5000);// 连接超时时间
            builder.socketTimeout(5000);// 设置读写操作超时时间
            ServerAddress address = new ServerAddress(&quot;192.168.41.185&quot;, 27017);
            client = new MongoClient(address, builder.build());
        }
    }

    /**
     * 获取MongoDB数据库
     * @param dbName MongoDB数据库名
     * @return MongoDB数据库对象
     */
    public static MongoDatabase getDatabase(String dbName){
        return client.getDatabase(dbName);
    }

    /**
     * 获取MongoDB集合
     * @param dbName MongoDB数据库名
     * @param collectionName MongoDB集合名
     * @return MongoDB集合对象
     */
    public static MongoCollection getCollection(String dbName, String collectionName){
        MongoDatabase database = getDatabase(dbName);
        return database.getCollection(collectionName);
    }
}</code></pre>
<h3><span id="5-创建-mongodb-的认证池连">5. 创建 MongoDB 的认证池连</span></h3><p>封装 MongoDBAuthPoolUtil </p>
<pre><code class="java">package com.trf.mongodb;

import com.mongodb.MongoClient;
import com.mongodb.MongoClientOptions;
import com.mongodb.MongoCredential;
import com.mongodb.ServerAddress;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;

/**
 * MongoDB工具类，使用用户认证，连接池
 * @author ad
 * @date 2019-11-04 17:26
 */
public class MongDBAuthPoolUtil {
    private static MongoClient client = null;
    static {
        if (client == null) {
            MongoClientOptions.Builder builder = new MongoClientOptions.Builder();
            builder.connectionsPerHost(10);// 每个地址的最大连接数
            builder.connectTimeout(5000);// 连接超时时间
            builder.socketTimeout(5000);// 设置读写操作超时时间
            ServerAddress address = new ServerAddress(&quot;192.168.41.185&quot;, 27017);
            //创建用户认证信息
            MongoCredential credential = MongoCredential.createCredential(&quot;dev&quot;, &quot;dev&quot;, &quot;dev&quot;.toCharArray());
            client = new MongoClient(address, credential, builder.build());
        }
    }

    /**
     * 获取MongoDB数据库
     * @param dbName MongoDB数据库名
     * @return MongoDB数据库对象
     */
    public static MongoDatabase getDatabase(String dbName){
        return client.getDatabase(dbName);
    }

    /**
     * 获取MongoDB集合
     * @param dbName MongoDB数据库名
     * @param collectionName MongoDB集合名
     * @return MongoDB集合对象
     */
    public static MongoCollection getCollection(String dbName, String collectionName){
        MongoDatabase database = getDatabase(dbName);
        return database.getCollection(collectionName);
    }

}
</code></pre>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB</title>
    <url>/2019/11/03/MongoDB/</url>
    <content><![CDATA[<h1><span id="mongodb">MongoDB</span></h1><p>@[toc]</p>
<h2><span id="创建用户">创建用户</span></h2><p>使用客户端连接mongodb</p>
<ol>
<li><p>切换到admin库<br><code>use admin</code></p>
</li>
<li><p>查看admin中的用户<br><code>db.system.users.find()</code></p>
</li>
<li><p>以使用 db.createUser({用户信息})函数创建用户。 </p>
<pre><code class="js">db.createUser({      
user: &quot;&lt;name&gt;&quot;,     
pwd: &quot;&lt;cleartext password&gt;&quot;,     
customData: { &lt;any information&gt; },     
roles: [         
    { role: &quot;&lt;role&gt;&quot;, db: &quot;&lt;database&gt;&quot; } | &quot;&lt;role&gt;&quot;,         ...     
    ] 
});</code></pre>
<p>1）user:新建用户名。</p>
<p>2）pwd:新建用户密码。</p>
<p>3）customData:存放一些用户相关的自定义数据，该属性也可忽略。 </p>
<p>4）roles:数组类型，配置用户的权限。</p>
</li>
<li><p>重启mongodb</p>
<p><code>db.shutdownServer()</code></p>
</li>
<li><p>使用用户登录</p>
<p><code>use admin</code></p>
<p><code>db.auth(&quot;user&quot;,&quot;pwd&quot;)</code></p>
</li>
</ol>
<h2><span id="更新用户">更新用户</span></h2><h3><span id="更新用户角色">更新用户角色</span></h3><pre><code>db.updateUser(&quot;用户名&quot;, {&quot;roles&quot;:[{&quot;role&quot;:&quot;角色名称&quot;},{&quot;更新项 2&quot;:&quot;更新内容&quot;}]}) </code></pre><p>如果我们需要对已存在的用户的角色做修改，那么我们可以使用 db.updateUser()函数来 更新用户角色。注意，该函数需要当前用户具有 userAdminAnyDatabase 或者更高的权限。 </p>
<p><strong>更新机制为覆盖更新，而不是添加更新，如果更新时没有带上原来的角色，会将原来已经给定的角色删除。</strong></p>
<h3><span id="更新用户密码">更新用户密码</span></h3><p>更新用户密码有两种方式：</p>
<p>1）使用 db.updateUser()函数更新密码。 </p>
<p>2）使用 db.changeUserPassword()函数更新密码</p>
<h2><span id="删除用户">删除用户</span></h2><p>通过 db.dropUser()函数可删除指定用户。删除成功后会返回 true。在删除用户时需要切 换到创建用户时所指定的数据库中才可以删除。注意：需要使用具有 userAdminAnyDatabse 角色管理员用户才可以删除其他用户。 </p>
<p><code>db.dropUser(&quot;user&quot;)</code></p>
<h2><span id="数据库操作">数据库操作</span></h2><h3><span id="创建数据库">创建数据库</span></h3><p>在 MongoDB 中创建数据库的命令使用的是 use 命令。该命令有两层含义： </p>
<p>1）切换到指定数据库。 </p>
<p>2）如果切换的数据库不存在，则创建该数据库。 </p>
<h3><span id="查看所有数据库">查看所有数据库</span></h3><p>我们可以通过 <code>show dbs</code> 命令查看当前 MongoDB 中的所有数据库。 </p>
<p>如果开启了用户认证，则需要先登录方可查看到结果，否则不显示任何信息。如果使用的是具备数据库管理员角色的用户，那么则可以看到 MongoDB 中的所有数据库，如果使用 的普通用户登录的那么只能查询到该用户所拥有的数据库。 </p>
<h3><span id="删除数据库">删除数据库</span></h3><p>在 MongoDB 中使用 db.dropDatabase()函数来删除数据库。在删除数据库之前，需要使用具备dbAdminAnyDatabase 角色的管理员用户登录，然后切换到需要删除的数据库，执行 db.dropDatabase()函数即可。删除成功后会返回一个{ “ok” : 1 }的 JSON 字符串。</p>
<h2><span id="集合操作">集合操作</span></h2><p>MongoDB 中的集合是一组文档的集，相当于关系型数据库中的表。 </p>
<h3><span id="创建集合">创建集合</span></h3><p>MongoDB 使用 db.createCollection()函数来创建集合。 语法格式：db.createCollection(name, options)。name: 要创建的集合名称。 options: 可选参数, 指定有关内存大小及索引的选项。 </p>
<p>options 可以是如下参数。 </p>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>capped</td>
<td>布尔</td>
<td>（可选）如果为 true，则创建固定集合。固定集合是指 有着固定大小的集合，当达到最大值时，它会自动覆盖最早 的文档。 当该值为 true 时，必须指定 size 参数。</td>
</tr>
<tr>
<td>autoindexid</td>
<td>布尔</td>
<td>（可选）如为 true，自动在 _id 字段创建索引。默认为 false。</td>
</tr>
<tr>
<td>size</td>
<td>数值</td>
<td>（可选）为固定集合指定一个最大值（以字节计）。 如果 capped 为 true，也需要指定该字段。</td>
</tr>
<tr>
<td>max</td>
<td>数值</td>
<td>（可选）指定固定集合中包含文档的最大数量。</td>
</tr>
</tbody></table>
<p>在插入文档时，MongoDB 首先检查固定集合的 size 字段，然后检查 max 字段。 </p>
<h3><span id="使用默认集合">使用默认集合</span></h3><h2><span id="查询文档">查询文档</span></h2><h3><span id="1-find函数">1. find()函数</span></h3><p>在 MongoDB 中可以使用 find()函数查询文档。 </p>
<p>语法格式为：<code>find({查询条件(可选)},{指定投影的键(可选)})</code></p>
<p>如果未给定参数则表示查询所有数据。 </p>
<p>pretty()函数可以使用格式化的方式来显示所有文档。 </p>
<h3><span id="2-findone函数">2. findOne()函数</span></h3><p>findOne()函数只返回满足条件的第一条数据。如果未做投影操作该方法则自带格式化功能。 </p>
<p>语法格式：findOne({查询条件(可选)},{投影操作(可选)}) </p>
<h3><span id="3-模糊查询">3.  模糊查询</span></h3><p>在 MongoDB 中可以通过//与^$实现模糊查询，注意使用模糊查询时查询条件不能放到双引号或单引号中。 </p>
<h3><span id="4-条件查询">4. 条件查询</span></h3><p>条件操作符用于比较两个表达式并从 mongoDB 集合中获取数据。 </p>
<p>语法格式：find({键:{操作符:条件}})或者 findOne({键:{操作符:条件}}) </p>
<h4><span id="gt">$gt</span></h4><p>*<em>(&gt;) 大于操作符 *</em></p>
<p>我们可以使用$gt 操作做大于的条件判断。该操作符可以数字或日期进行判断。 </p>
<p>查询 size 大于 300 的文档 </p>
<p><img src="C:%5CUsers%5Cad%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191102171850805.png" alt="image-20191102171850805"></p>
<h3><span id="5-正则查询">5. 正则查询</span></h3><p>MongoDB 中查询条件也可以使用正则表达式作为匹配约束。</p>
<p>语法格式：db.COLLECTION_NAME.find({字段名:正则表达式}); </p>
<p>或db.COLLECTION_NAME.find({字段名:{$regex:正则表达式,$options:正则选项}}); </p>
<p>正则表达式格式：/xxx/ </p>
<p>/xxx/ [正则选项]</p>
<p>正则选项： </p>
<p>i - 不区分大小写以匹配大小写的情况。 </p>
<p>m - 多行查找，如果内容里面不存在换行符号（例如 \n）或者条件上没有（start/end）， 该选项没有任何效果 </p>
<p>x - 设置 x 选项后，正则表达式中的非转义的空白字符将被忽略。需要$regex 与$options 语法 </p>
<p>s - 允许点字符（即.）匹配包括换行符在内的所有字符。需要$regex 与$options 语法 </p>
<p>i，m，x，s 可以组合使用。</p>
<p>查询 dev 集合中 title 字段以’t’开头的数据 :</p>
<p>db.test.find({title:/^t/})</p>
<p><img src="D:%5Cblog%5Csource_posts%5Cimg%5Cimage-20191104102137036.png" alt="image-20191104102137036"></p>
<p>查询 dev 集合中 title 字段以’b’结尾的数据 </p>
<p><img src="D:%5Cblog%5Csource_posts%5Cimg%5Cimage-20191104102253293.png" alt="image-20191104102253293"></p>
<p>查询 dev 集合中 dev 字段中包含’es’的数据 </p>
<p><img src="D:%5Cblog%5Csource_posts%5Cimg%5Cimage-20191104102420077.png" alt="image-20191104102420077"></p>
<p>查询 dev 集合中 title 字段已’S’开头、’g’结尾的数据 </p>
<p><code>db.dev.find({title:/^S.*g$/});</code></p>
<p><code>db.dev.find({title:{$regex:/^z.*n$/}});</code></p>
<p>查询 dev 集合中 title 字段以’S’或’t’开头的数据 </p>
<p><code>db.dev.find({title:{$in:[/^S/, /^t/]}});</code></p>
<p> 查询 dev 集合中 title 字段不以’S’开头的数据 </p>
<p><code>db.dev.find({title:{$not:/^S/}});</code></p>
<p>查询 dev 集合中 title 字段不以’S’或’t’开头的数据 </p>
<p><code>db.stu.find({title:{$nin:[/^S/, /^t/]}});</code></p>
<h2><span id="mongodb-聚合查询">MongoDB 聚合查询</span></h2><p>在 MongoDB 中我们可以通过 aggregate()函数来完成一些聚合查询，aggregate()函数主 要用于处理诸如统计,平均值,求和等，并返回计算后的数据结果。 </p>
<p>语法格式：</p>
<p>db.COLLECTION_NAME.aggregate([{$group:{_id:”$分组键名”,”$分组键名”,…..,别名:{聚合 运算:”$运算列”}}},{条件筛选:{键名:{运算条件:运算值}}}])</p>
<p>常见的 mongo 的聚合操作和 mysql 的查询做类比 </p>
<table>
<thead>
<tr>
<th>SQL操作/函数</th>
<th>mongodb聚合操作</th>
</tr>
</thead>
<tbody><tr>
<td>where</td>
<td>$match</td>
</tr>
<tr>
<td>group by</td>
<td>$group</td>
</tr>
<tr>
<td>having</td>
<td>$match</td>
</tr>
<tr>
<td>select</td>
<td>$project</td>
</tr>
<tr>
<td>order by</td>
<td>$sort</td>
</tr>
<tr>
<td>limit</td>
<td>$limit</td>
</tr>
<tr>
<td>sum()</td>
<td>$sum</td>
</tr>
<tr>
<td>count()</td>
<td>$sum</td>
</tr>
<tr>
<td>join</td>
<td>$lookup</td>
</tr>
</tbody></table>
<h3><span id="求和-sum">求和 - $sum</span></h3><p>*<em>查询 dev 集合中一共有多少个文档。 *</em></p>
<p>相当于 sql 语句：</p>
<p><code>SELECT  count(*) AS count  FROM  dev</code></p>
<p><code>db.dev.aggregate([{$group:{_id:null,count:{$sum:1}}}])</code></p>
<p>*<em>$group：分组，代表聚合的分组条件 *</em></p>
<p><code>_id</code>：分组的字段。相当于 SQL 分组语法 group by column_name 中的 column_name 部分。 如果根据某字段的值分组，则定义为_id:’$字段名’。</p>
<p>null 代表一个固定的字面值’null’，表示不进行分组，直接查询所有</p>
<p>count：返回结果字段名。可以自定义，类似 SQL 中的字段别名。 </p>
<p>$sum：求和表达式。相当于 SQL 中的 sum()。</p>
<p>*<em>查询 dev 集合中的所有 size 键中的值的总和。 *</em></p>
<p>相当于 sql 语句：<code>SELECT sum(size) AS totalSize FROM dev</code></p>
<p><code>db.dev.aggregate([{$group:{_id:null,totalSize:{$sum:&quot;$size&quot;}}}])</code></p>
<p>“$size”：代表文档中的 szie 字段的值。 </p>
<p>totalSize：相当于别名</p>
<p>*<em>对每一个 title 进行分组并计算每组中的 size 的总和 *</em></p>
<p>相当于 sql 语句：</p>
<p><code>SELECT title AS _id , sum(size) AS totalSize FROM dev GROUP BY title</code></p>
<p><code>db.dev.aggregate([{$group:{_id:&quot;$title&quot;,totalSize:{$sum:&quot;$size&quot;}}}])</code></p>
<h3><span id="条件筛选-match">条件筛选 - $match</span></h3><p><strong>查询 dev 集合有多少文档的 size 大于 200。</strong> </p>
<p><code>db.dev.aggregate([{$match:{size:{$gt:200}}},{$group:{_id:null,totalSize:{$sum:1}}}])</code></p>
<p>相当于 SQL 语句：<code>SELECT count(*) FROM dev WHERE size &gt; 200</code></p>
<p> $match：匹配条件，相当于 SQL 中的 where 子句，代表聚合之前进行条件筛选。</p>
<p> <strong>查询 dev 集合，根据 title 分组计算出每组的 size 的总和，并过滤掉总和小于等于 200 的文档。</strong></p>
<p><code>db.dev.aggregate([{$group:{_id:&quot;$title&quot;,totalSize:{$sum:&quot;$size&quot;}}},{$match:{totalSize:{$gt: 200}}}])</code></p>
<p>相当于 SQL 语句：<code>SELECT sum(size)  AS totalSize FROM dev  GROUP BY title HAVING totalSize &gt; 200</code></p>
<h3><span id="最大值-max">最大值 - $max</span></h3><p><strong>查询 dev 集合中 size 最大的文档。</strong></p>
<p><code>db.dev.aggregate([{$group:{_id:null,maxSize:{$max:&quot;$size&quot;}}}])</code></p>
<p>$max:”$size”：计算 size 键中的最大值。 </p>
<p>相当于 SQL 语句：<code>SELECT max(size) FROM dev</code></p>
<h3><span id="最小值-min">最小值 - $min</span></h3><p>*<em>查询 dev 集合中 size 最小的文档。 *</em></p>
<p><code>db.dev.aggregate([{$group:{_id:null,minSize:{$min:&quot;$size&quot;}}}])</code></p>
<p>$min:”$size”：计算 size 键中的最小值。 相</p>
<p>相当于 SQL 语句：SELECT min(size) FROM dev  </p>
<h3><span id="平均值-avg">平均值 - $avg</span></h3><p>*<em>查询 dev 集合中 size 的平均值 *</em></p>
<p><code>db.dev.aggregate([{$group:{_id:null,sizeAvg:{$avg:&quot;$size&quot;}}}])</code></p>
<p>$avg:”$size”：计算 size 键的平均值。 </p>
<p><code>相当于 SQL 语句：SELECT avg(size) FROM dev</code></p>
<h3><span id="统计结果返回数组-push">统计结果返回数组 - $push</span></h3><p><strong>查询 dev 集合，按照 size 分组并返回他们的 title，如果 size 相同则使用数组返回他们的 title。</strong></p>
<p><code>db.dev.aggregate([{$group:{_id:&quot;$size&quot;,title:{$push:&quot;$title&quot;}}}])</code></p>
<p>$push:”$title”：如果 size 相同则使用数组返回他们不同的 title </p>
<h3><span id="数组字段拆分-unwind">数组字段拆分 - $unwind</span></h3><p>*<em>查询 dev 集合，将数组中的内容拆分显示。 *</em></p>
<p><code>db.dev.aggregate([{$unwind:&quot;$tags&quot;}])</code></p>
<p> $unwind:”$tags”：对数组中的元素进行拆分显示。 </p>
<h2><span id="管道操作">管道操作</span></h2><p>什么是管道操作： </p>
<p>管道在 Unix 和 Linux 中一般用于将当前命令的输出结果作为下一个命令的参数。 </p>
<p>MongoDB 的聚合管道将 MongoDB 文档在一个管道<strong>处理完毕后将结果传递给下一个管道处理</strong>。管道操作是可以重复的。 </p>
<p>管道操作符是按照书写的顺序依次执行的，每个操作符都会接受一连串的文档，对这些 文档做一些类型转换，最后将转换后的文档作为结果传递给下一个操作符（对于最后一个管 道操作符，是将结果返回给客户端），称为<strong>流式工作方式。</strong></p>
<p>*<em>管道操作符：$match、$group、$sort、$limit、$skip、$unwind *</em></p>
<p>管道操作符，只能用于计算当前聚合管道的文档，不能处理其它的文档。 </p>
<h3><span id="project-聚合投影约束">$project-聚合投影约束</span></h3><p>$project 操作符：我们可以使用$project 操作符做聚合投影操作。 </p>
<p>*<em>查询 dev 集合，将数组中的内容拆分显示，并只显示 title 键与 tags 键的值。 *</em><code>db.dev.aggregate([{$unwind:&quot;$tags&quot;},{$project:{_id:0,tags:&quot;$tags&quot;,title:&quot;$title&quot;}}])</code></p>
<p>tags:”$tags”:显示 tags 的值，字段名为 tags。 </p>
<p>title:”$title”:显示 title 的值，字段名为 title。 </p>
<p><strong>查询 dev 集合，将数组中的内容拆分显示。要求只显示 title 键与 tags 键的值并将 title 键修改为 Title。</strong></p>
<p><code>db.dev.aggregate([{$unwind:&quot;$tags&quot;},{$project:{_id:0,tags:&quot;$tags&quot;,Title:&quot;$title&quot;}}])</code></p>
<p>Title:”$title”:显示 title 的值，字段名为 Title。 </p>
<h3><span id="project-字符串处理">$project-字符串处理</span></h3><p>在$project 中我们可以通过 MongoDB 的字符串操作符对投影的内容做字符串处理。 </p>
<p>*<em>查询 dev 集合，将数组中的内容拆分显示。将 title 中的值换为小写并命名为 New_Title， 将 tags 的值转换为大写并命名为 New_Tags。 *</em></p>
<p><code>db.dev.aggregate([{$unwind:&quot;$tags&quot;},{$project:{_id:0,New_Title:{$toLower:&quot;$title&quot;},New_ tags:{$toUpper:&quot;$tags&quot;}}}])</code></p>
<p>New_Title:{$toLower:”$title”}:将 title 的值转换为小写，显示字段名为 New_Title。</p>
<p>New_tags:{$toUpper:”$tags”}:将 tags 的值转换为大写，显示字段名为 New_Tags。</p>
<p>*<em>查询 dev 集合，将数组中的内容拆分显示。将 title 字段和 tags 字段的值拼接为一个完 整字符串并在 Title_Tags 字段中显示。 *</em></p>
<p><code>db.dev.aggregate([{$unwind:&quot;$tags&quot;},{$project:{_id:0,Title_Tags:{$concat:[&quot;$title&quot;,&quot;-&quot;,&quot;$tag s&quot;]}}}])</code></p>
<p>Title_Tags:{$concat:[“$title”,”-“,”$tags”]}:将字段 title 与字符串’-‘和字段 tags 的值拼接为 新的字符串，并显示字段名为 Title_Tags </p>
<p><strong>查询 dev 集合，将数组中的内容拆分显示。只显示 title 字段的前 3 个字符，并命名为 Title_Prefix</strong></p>
<p><code>db.dev.aggregate([{$unwind:&quot;$tags&quot;},{$project:{_id:0,Title_Prefix:{$substr:[&quot;$title&quot;,0,3]}}}
])</code></p>
<p>Title_Prefix:{$substr:[“$title”,0,3]}:将title的值从0开始截取截3位，并命名为Title_Prefix </p>
<p>*<em>$substr 只能匹配 ASCII 的数据，对 于中文要使用$substrCP *</em></p>
<h3><span id="project-算术运算">$project-算术运算</span></h3><p>加：$add</p>
<p>减：$subtract</p>
<p>乘：$multiply</p>
<p>除：$devide</p>
<p>取模：$mod</p>
<p>在$project 中我们可以通过 MongoDB 的算数作符对投影的内容做运算处理。 </p>
<p><strong>查询 dev 集合中数据，显示 title 和 size 字段，为 size 字段数据做加 1 操作，显示字段 命名为 New_Size。</strong> </p>
<p><code>db.dev.aggregate([{$project:{_id:0,title:1,New_Size:{$add:[&quot;$size&quot;,1]}}}])</code></p>
<p> New_Size:{$add:[“$size”,1]}:在查询结果中，对size的值做加1处理，并命名为New_Size。</p>
<p>*<em>排除那些没有 size 键的文档。 *</em></p>
<p><code>db.dev.aggregate([{$match:{size:{$ne:null}}},{$project:{_id:0,title:1,New_Size:{$add:[&quot;$si ze&quot;,1]}}}])</code></p>
<p>$match:{size:{$ne:null}:排除那些没有 size 的文档。 </p>
<p><strong>查询 dev 集合中数据，显示 title 和 size 字段，为 size 字段数据做减 1 操作，显示字段 命名为 New_Size。</strong></p>
<p><code>db.dev.aggregate([{$match:{size:{$ne:null}}},{$project:{_id:0,title:1,New_Size:{$subtract:[ &quot;$size&quot;,1]}}}])</code></p>
<p>New_Size:{$subtract:[“$size”,1]}:在查询结果中，对 size 的值做减 1 处理，并命名为 New_Size。 </p>
<p>*<em>查询 dev 集合中数据，显示 title 和 size 字段，为 size 字段数据做乘 2 操作，显示字段 命名为 New_Size。 *</em></p>
<h3><span id="project-日期操作">$project-日期操作</span></h3><h4><span id="mongodb-中的日期处理">MongoDB 中的日期处理</span></h4><p>插入当前时间</p>
<p><code>db.dev.insert({date:new Date()})</code></p>
<p>MongoDB 中的时间会比系统当前时间少 8 个小时。因为他的时间是 UTC 的时间，而中 国的时区是东八区，比 UTC 快 8 个小时，所以会比当前时间少 8 个小时。 </p>
<p>插入指定日期 :</p>
<p>方式一： </p>
<p><code>db.dev.insert({time:new Date(&quot;2018-05-01T14:20:23Z&quot;)})</code></p>
<p>方式二： </p>
<p><code>db.dev.insert({time:ISODate(&quot;2019-06-01T16:30:00Z&quot;)})</code></p>
<p>查询时间 </p>
<p><code>db.dev.find({time:{$eq:new Date(&quot;2018-05-01T14:20:23&quot;)}})</code></p>
<p>或者 <code>db.dev.find({time:{$gt:new Date(&quot;2018-04-01&quot;)}})</code></p>
<h4><span id="project-日期处理">$project-日期处理</span></h4><p>向 dev 集合中插入一个文档，该文档包含 name:”admin” birth:”2010-12-12T12:12:12” </p>
<p>db.test.insert({name:”admin”, birth:new Date(“2010-12-12T12:12:12”)})</p>
<p>*<em>查询 dev 集合中数据，显示 birth 字段的各部分数据，包括：年、月、日等信息。 *</em></p>
<p>显示年月日 </p>
<p><code>db.dev.aggregate([{$match:{name:&quot;admin&quot;}},{$project:{ 年份:{$year:&quot;$birth&quot;}, 月 份:{$month:&quot;$birth&quot;},日:{$dayOfMonth:&quot;$birth&quot;}}}])</code></p>
<p>{$year:”$birth”}年份</p>
<p>{$month:”$birth”}月份 </p>
<p>{$dayOfMonth:”$birth”}日期 </p>
<p> 显示小时、分钟、秒、毫秒 </p>
<p><code>db.dev.aggregate([{$match:{name:&quot;admin&quot;}},{$project:{ 年份:{$year:&quot;$birth&quot;}, 月 份:{$month:&quot;$birth&quot;},日:{$dayOfMonth:&quot;$birth&quot;},时:{$hour:&quot;$birth&quot;},分:{$minute:&quot;$birth&quot;}, 秒:{$second:&quot;$birth&quot;},毫秒:{$millisecond:&quot;$birth&quot;}}}])</code></p>
<p>{$hour:”$birth”}:小时</p>
<p>{$minute:”$birth”}:分钟 </p>
<p>{$second:”$birth”}:秒 </p>
<p>{$millisecond:”$birth”}:毫秒 </p>
<p>显示星期、全年的第几周、全年中的第几天 </p>
<p><code>db.dev.aggregate([{$match:{name:&quot;admin&quot;}},{$project:{ 年份:{$year:&quot;$birth&quot;}, 月 份:{$month:&quot;$birth&quot;},日:{$dayOfMonth:&quot;$birth&quot;},时:{$hour:&quot;$birth&quot;},分:{$minute:&quot;$birth&quot;}, 秒:{$second:&quot;$birth&quot;},毫秒:{$millisecond:&quot;$birth&quot;},星期:{$dayOfWeek:&quot;$birth&quot;},全年的第几 周:{$week:&quot;$birth&quot;},全年中的第几天:{$dayOfYear:&quot;$birth&quot;}}}])</code></p>
<p>{$dayOfWeek:”$birth”}:星期日为 1，星期六为 7。 </p>
<p>{$week:”$birth”}:全年的周计数从 0 开始。 </p>
<p>{$dayOfYear:”$birth”}:全年中的第几天。 </p>
<p>显示自定义日期格式 </p>
<p>db.dev.aggregate([{$match:{name:”admin”}},{$project:{ 年份:{$year:”$birth”}, 月 份:{$month:”$birth”},日:{$dayOfMonth:”$birth”},时:{$hour:”$birth”},分:{$minute:”$birth”}, 秒:{$second:”$birth”},毫秒:{$millisecond:”$birth”},星期:{$dayOfWeek:”$birth”},全年的第几 周 :{$week:”$birth”}, 全 年 中 的 第 几 天 :{$dayOfYear:”$birth”}, 自 定 义 日 期 格式:{$dateToString:{format:”%Y 年%m 月%d 日 %H:%M:%S”,date:”$birth”}}}}]) </p>
<p>{$dateToString:{format:”%Y年%m月%d日 %H:%M:%S”,date:”$birth”}:自定义日期格式 具体格式如下： </p>
<table>
<thead>
<tr>
<th>字符</th>
<th>含义</th>
<th>取值范围</th>
</tr>
</thead>
<tbody><tr>
<td>%Y</td>
<td>Year (4 dlgits, zero padded)</td>
<td>0000-9999</td>
</tr>
<tr>
<td>%m</td>
<td>Month (2 digits, zero padded)</td>
<td>01-12</td>
</tr>
<tr>
<td>%d</td>
<td>Day of Month (2 digits, zero padded)</td>
<td>01-31</td>
</tr>
<tr>
<td>%6H</td>
<td>Hour (2 digits. zero padded. 24-hour clock)</td>
<td>00-23</td>
</tr>
<tr>
<td>%M</td>
<td>Minute (2 digits zero padded)</td>
<td>00-59</td>
</tr>
<tr>
<td>%S</td>
<td>Second (2 digits, zero padded)</td>
<td>00-60</td>
</tr>
<tr>
<td>%L</td>
<td>Mllisecond (3 digits, zero padded)</td>
<td>000-999</td>
</tr>
<tr>
<td>%J</td>
<td>Dayof year (3 digits, zero padded)</td>
<td>001-366</td>
</tr>
<tr>
<td>%w</td>
<td>Day of week (1-Sunday.7-Saturday)</td>
<td>1-7</td>
</tr>
<tr>
<td>%U</td>
<td>Week of year (2 digts, zero padded)</td>
<td>00-53</td>
</tr>
</tbody></table>
<h2><span id="mongodb-索引">MongoDB 索引</span></h2><h3><span id="创建索引">创建索引</span></h3><p>在 MongoDB 中会自动为文档中的_Id(文档的主键)键创建索引，与关系型数据的主键索引类似。 </p>
<p>我们可以使用 createIndex()函数来为其他的键创建索引。在创建索引时需要指定排序规则。1按照升序规则创建索引，-1 按照降序规则创建索引。 </p>
<p>语法格式：db.COLLECTION_NAME.createIndex({创建索引的键:排序规则,……},{创建索 引的参数(可选参数)}) </p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>为 test集合中的 title 键创建索引，并让创建工作在后台运行。 </p>
<p><img src="C:%5CUsers%5Cad%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191102174033636.png" alt="image-20191102174033636"></p>
<h3><span id="查看索引">查看索引</span></h3><h4><span id="查看集合索引">查看集合索引</span></h4><p>我们可以通过 getIndexes()或者 getIndexSpecs()函数查看集合中的所有索引信息。 </p>
<p>语法格式：db.COLLECTION_NAME.getIndexse()</p>
<p>语法格式：db.COLLECTION_NAME.getIndexSpecs() </p>
<p><img src="C:%5CUsers%5Cad%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191102174313637.png" alt="image-20191102174313637"></p>
<h4><span id="查看索引键">查看索引键</span></h4><p>我们可以通过使用 getIndexKeys()函数查看集合的索引键。 </p>
<p>语法格式：db.COLLECTION_NAME.getIndexKeys();</p>
<h4><span id="查看索引大小">查看索引大小</span></h4><p>可以通过 totalIndexSize()函数来查看当前集合中索引的大小，单位为字节</p>
<p>语法格式：<code>语法格式：db.COLLECTION_NAME.totalIndexSize([detail](可选参数))</code></p>
<p>参数解释：detail 可选参数，传入除 0 或 false 外的任意数据，那么会显示该集合中每个 索引的大小及集合中索引的总大小。如果传入 0 或 false 则只显示该集合中所有索引的总大 小。默认值为 false。 </p>
<h3><span id="修改索引">修改索引</span></h3><p>MongoDB 没有单独的修改索引函数，如果要修改某个索引，需要先删除旧的索引，再创建新的索引。 </p>
<h3><span id="删除索引">删除索引</span></h3><h4><span id="删除集合中的指定索引">删除集合中的指定索引</span></h4><p>我们可以通过 dropIndex()函数来删除指定索引。 </p>
<p>语法格式：<code>db.COLLECTION_NAME.dropIndex(&quot;索引名称&quot;)。</code></p>
<h4><span id="删除集合中的全部索引">删除集合中的全部索引</span></h4><p>我们可以使用 dropIndexes()函数删除集合中的全部索引，_id 键的索引除外。 </p>
<p>语法格式：<code>db.COLLECTION_NAME.dropIndexes()</code></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
</search>
