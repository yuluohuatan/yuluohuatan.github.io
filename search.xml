<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>MongoDB</title>
    <url>/2019/11/03/MongoDB/</url>
    <content><![CDATA[<h2 id="创建用户"><a href="#创建用户" class="headerlink" title="创建用户"></a>创建用户</h2><p>使用客户端连接mongodb</p>
<ol>
<li><p>切换到admin库<br><code>use admin</code></p>
</li>
<li><p>查看admin中的用户<br><code>db.system.users.find()</code></p>
</li>
<li><p>以使用 db.createUser({用户信息})函数创建用户。 </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">db.createUser(&#123;      </span><br><span class="line">user: <span class="string">"&lt;name&gt;"</span>,     </span><br><span class="line">pwd: <span class="string">"&lt;cleartext password&gt;"</span>,     </span><br><span class="line">customData: &#123; &lt;any information&gt; &#125;,     </span><br><span class="line">roles: [         </span><br><span class="line">	&#123; <span class="attr">role</span>: <span class="string">"&lt;role&gt;"</span>, <span class="attr">db</span>: <span class="string">"&lt;database&gt;"</span> &#125; | <span class="string">"&lt;role&gt;"</span>,         ...     </span><br><span class="line">	] </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>1）user:新建用户名。</p>
<p>2）pwd:新建用户密码。</p>
<p>3）customData:存放一些用户相关的自定义数据，该属性也可忽略。 </p>
<p>4）roles:数组类型，配置用户的权限。</p>
</li>
<li><p>重启mongodb</p>
<p><code>db.shutdownServer()</code></p>
</li>
<li><p>使用用户登录</p>
<p><code>use admin</code></p>
<p><code>db.auth(&quot;user&quot;,&quot;pwd&quot;)</code></p>
</li>
</ol>
<h2 id="更新用户"><a href="#更新用户" class="headerlink" title="更新用户"></a>更新用户</h2><h3 id="更新用户角色"><a href="#更新用户角色" class="headerlink" title="更新用户角色"></a>更新用户角色</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">db.updateUser(&quot;用户名&quot;, &#123;&quot;roles&quot;:[&#123;&quot;role&quot;:&quot;角色名称&quot;&#125;,&#123;&quot;更新项 2&quot;:&quot;更新内容&quot;&#125;]&#125;)</span><br></pre></td></tr></table></figure>

<p>如果我们需要对已存在的用户的角色做修改，那么我们可以使用 db.updateUser()函数来 更新用户角色。注意，该函数需要当前用户具有 userAdminAnyDatabase 或者更高的权限。 </p>
<p><strong>更新机制为覆盖更新，而不是添加更新，如果更新时没有带上原来的角色，会将原来已经给定的角色删除。</strong></p>
<h3 id="更新用户密码"><a href="#更新用户密码" class="headerlink" title="更新用户密码"></a>更新用户密码</h3><p>更新用户密码有两种方式：</p>
<p>1）使用 db.updateUser()函数更新密码。 </p>
<p>2）使用 db.changeUserPassword()函数更新密码</p>
<h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><p>通过 db.dropUser()函数可删除指定用户。删除成功后会返回 true。在删除用户时需要切 换到创建用户时所指定的数据库中才可以删除。注意：需要使用具有 userAdminAnyDatabse 角色管理员用户才可以删除其他用户。 </p>
<p><code>db.dropUser(&quot;user&quot;)</code></p>
<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p>在 MongoDB 中创建数据库的命令使用的是 use 命令。该命令有两层含义： </p>
<p>1）切换到指定数据库。 </p>
<p>2）如果切换的数据库不存在，则创建该数据库。 </p>
<h3 id="查看所有数据库"><a href="#查看所有数据库" class="headerlink" title="查看所有数据库"></a>查看所有数据库</h3><p>我们可以通过 <code>show dbs</code> 命令查看当前 MongoDB 中的所有数据库。 </p>
<p>如果开启了用户认证，则需要先登录方可查看到结果，否则不显示任何信息。如果使用的是具备数据库管理员角色的用户，那么则可以看到 MongoDB 中的所有数据库，如果使用 的普通用户登录的那么只能查询到该用户所拥有的数据库。 </p>
<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p>在 MongoDB 中使用 db.dropDatabase()函数来删除数据库。在删除数据库之前，需要使用具备dbAdminAnyDatabase 角色的管理员用户登录，然后切换到需要删除的数据库，执行 db.dropDatabase()函数即可。删除成功后会返回一个{ “ok” : 1 }的 JSON 字符串。</p>
<h2 id="集合操作"><a href="#集合操作" class="headerlink" title="集合操作"></a>集合操作</h2><p>MongoDB 中的集合是一组文档的集，相当于关系型数据库中的表。 </p>
<h3 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h3><p>MongoDB 使用 db.createCollection()函数来创建集合。 语法格式：db.createCollection(name, options)。name: 要创建的集合名称。 options: 可选参数, 指定有关内存大小及索引的选项。 </p>
<p>options 可以是如下参数。 </p>
<table>
<thead>
<tr>
<th>字段</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>capped</td>
<td>布尔</td>
<td>（可选）如果为 true，则创建固定集合。固定集合是指 有着固定大小的集合，当达到最大值时，它会自动覆盖最早 的文档。 当该值为 true 时，必须指定 size 参数。</td>
</tr>
<tr>
<td>autoindexid</td>
<td>布尔</td>
<td>（可选）如为 true，自动在 _id 字段创建索引。默认为 false。</td>
</tr>
<tr>
<td>size</td>
<td>数值</td>
<td>（可选）为固定集合指定一个最大值（以字节计）。 如果 capped 为 true，也需要指定该字段。</td>
</tr>
<tr>
<td>max</td>
<td>数值</td>
<td>（可选）指定固定集合中包含文档的最大数量。</td>
</tr>
</tbody></table>
<p>在插入文档时，MongoDB 首先检查固定集合的 size 字段，然后检查 max 字段。 </p>
<h3 id="使用默认集合"><a href="#使用默认集合" class="headerlink" title="使用默认集合"></a>使用默认集合</h3><h2 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h2><h3 id="1-find-函数"><a href="#1-find-函数" class="headerlink" title="1. find()函数"></a>1. find()函数</h3><p>在 MongoDB 中可以使用 find()函数查询文档。 </p>
<p>语法格式为：<code>find({查询条件(可选)},{指定投影的键(可选)})</code></p>
<p>如果未给定参数则表示查询所有数据。 </p>
<p>pretty()函数可以使用格式化的方式来显示所有文档。 </p>
<h3 id="2-findOne-函数"><a href="#2-findOne-函数" class="headerlink" title="2. findOne()函数"></a>2. findOne()函数</h3><p>findOne()函数只返回满足条件的第一条数据。如果未做投影操作该方法则自带格式化功能。 </p>
<p>语法格式：findOne({查询条件(可选)},{投影操作(可选)}) </p>
<h3 id="3-模糊查询"><a href="#3-模糊查询" class="headerlink" title="3.  模糊查询"></a>3.  模糊查询</h3><p>在 MongoDB 中可以通过//与^$实现模糊查询，注意使用模糊查询时查询条件不能放到双引号或单引号中。 </p>
<h3 id="4-条件查询"><a href="#4-条件查询" class="headerlink" title="4. 条件查询"></a>4. 条件查询</h3><p>条件操作符用于比较两个表达式并从 mongoDB 集合中获取数据。 </p>
<p>语法格式：find({键:{操作符:条件}})或者 findOne({键:{操作符:条件}}) </p>
<h4 id="gt"><a href="#gt" class="headerlink" title="$gt"></a>$gt</h4><p>*<em>(&gt;) 大于操作符 *</em></p>
<p>我们可以使用$gt 操作做大于的条件判断。该操作符可以数字或日期进行判断。 </p>
<p>查询 size 大于 300 的文档 </p>
<p><img src="C:%5CUsers%5Cad%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191102171850805.png" alt="image-20191102171850805"></p>
<h2 id="MongoDB-索引"><a href="#MongoDB-索引" class="headerlink" title="MongoDB 索引"></a>MongoDB 索引</h2><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p>在 MongoDB 中会自动为文档中的_Id(文档的主键)键创建索引，与关系型数据的主键索引类似。 </p>
<p>我们可以使用 createIndex()函数来为其他的键创建索引。在创建索引时需要指定排序规则。1按照升序规则创建索引，-1 按照降序规则创建索引。 </p>
<p>语法格式：db.COLLECTION_NAME.createIndex({创建索引的键:排序规则,……},{创建索 引的参数(可选参数)}) </p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>为 test集合中的 title 键创建索引，并让创建工作在后台运行。 </p>
<p><img src="C:%5CUsers%5Cad%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191102174033636.png" alt="image-20191102174033636"></p>
<h3 id="查看索引"><a href="#查看索引" class="headerlink" title="查看索引"></a>查看索引</h3><h4 id="查看集合索引"><a href="#查看集合索引" class="headerlink" title="查看集合索引"></a>查看集合索引</h4><p>我们可以通过 getIndexes()或者 getIndexSpecs()函数查看集合中的所有索引信息。 </p>
<p>语法格式：db.COLLECTION_NAME.getIndexse()</p>
<p>语法格式：db.COLLECTION_NAME.getIndexSpecs() </p>
<p><img src="C:%5CUsers%5Cad%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20191102174313637.png" alt="image-20191102174313637"></p>
<h4 id="查看索引键"><a href="#查看索引键" class="headerlink" title="查看索引键"></a>查看索引键</h4><p>我们可以通过使用 getIndexKeys()函数查看集合的索引键。 </p>
<p>语法格式：db.COLLECTION_NAME.getIndexKeys();</p>
<h4 id="查看索引大小"><a href="#查看索引大小" class="headerlink" title="查看索引大小"></a>查看索引大小</h4><p>可以通过 totalIndexSize()函数来查看当前集合中索引的大小，单位为字节</p>
<p>语法格式：<code>语法格式：db.COLLECTION_NAME.totalIndexSize([detail](可选参数))</code></p>
<p>参数解释：detail 可选参数，传入除 0 或 false 外的任意数据，那么会显示该集合中每个 索引的大小及集合中索引的总大小。如果传入 0 或 false 则只显示该集合中所有索引的总大 小。默认值为 false。 </p>
<h3 id="修改索引"><a href="#修改索引" class="headerlink" title="修改索引"></a>修改索引</h3><p>MongoDB 没有单独的修改索引函数，如果要修改某个索引，需要先删除旧的索引，再创建新的索引。 </p>
<h3 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h3><h4 id="删除集合中的指定索引"><a href="#删除集合中的指定索引" class="headerlink" title="删除集合中的指定索引"></a>删除集合中的指定索引</h4><p>我们可以通过 dropIndex()函数来删除指定索引。 </p>
<p>语法格式：<code>db.COLLECTION_NAME.dropIndex(&quot;索引名称&quot;)。</code></p>
<h4 id="删除集合中的全部索引"><a href="#删除集合中的全部索引" class="headerlink" title="删除集合中的全部索引"></a>删除集合中的全部索引</h4><p>我们可以使用 dropIndexes()函数删除集合中的全部索引，_id 键的索引除外。 </p>
<p>语法格式：<code>db.COLLECTION_NAME.dropIndexes()</code></p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
</search>
